// In universalDocument.ts - Enhanced fromText() method
private static parseTransformationHistory(lines: string[], startIndex: number): {
  transformations: UDTransformation[],
  nextIndex: number
} {
  const transformations: UDTransformation[] = [];
  let currentTransform: Partial<UDTransformation> | null = null;
  let i = startIndex;
  
  while (i < lines.length) {
    const line = lines[i];
    const trimmed = line.trim();
    
    // New transformation entry
    if (trimmed.startsWith('- verb:')) {
      // Save previous if exists
      if (currentTransform && currentTransform.verb) {
        transformations.push(currentTransform as UDTransformation);
      }
      
      currentTransform = {
        id: uuidv4(),
        timestamp: Date.now(),
        verb: trimmed.substring('- verb:'.length).trim(),
        agent: '',
        description: ''
      };
    }
    // Agent line
    else if (trimmed.startsWith('agent:') && currentTransform) {
      currentTransform.agent = trimmed.substring('agent:'.length).trim();
    }
    // Description line (can be multiline)
    else if (trimmed.startsWith('description:') && currentTransform) {
      currentTransform.description = trimmed.substring('description:'.length).trim();
      
      // Check for multiline description
      let j = i + 1;
      while (j < lines.length && lines[j].startsWith('    ')) {
        currentTransform.description += '\n' + lines[j].trim();
        j++;
      }
      i = j - 1; // Adjust index
    }
    // End of transformation block
    else if (!line.startsWith(' ') || trimmed === '') {
      if (currentTransform && currentTransform.verb) {
        transformations.push(currentTransform as UDTransformation);
      }
      break;
    }
    
    i++;
  }
  
  // Don't forget the last one
  if (currentTransform && currentTransform.verb) {
    transformations.push(currentTransform as UDTransformation);
  }
  
  return { transformations, nextIndex: i };
}
